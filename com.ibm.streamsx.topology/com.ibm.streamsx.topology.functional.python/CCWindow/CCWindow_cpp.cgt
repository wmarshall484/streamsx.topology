
/* Additional includes go here */

#include "splpy.h"
#include "splpy_funcop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::implementationPrologue($model);%>

@include "../pyspltuple.cgt"
<%
 # Select the Python wrapper function
 my $pyoutstyle = splpy_tuplestyle($model->getOutputPortAt(0));

 # Function to help convert input to PyObject *, so it can be 
 # inserted into the window.
 # my $in_function = $pystyle . '_in__object_out';

 # Function to convert output of aggregation function
 # to correct output.
 my $out_function = 'pickle_in__' . $pyoutstyle . '_out';
%>

#define SPLPY_TUPLE_MAP(f, v, r, occ) \
    streamsx::topology::Splpy::pyTupleMap(f, v, r)

// Constructor
MY_OPERATOR::MY_OPERATOR() :
   window_(*this, 0,
   CountWindowPolicy(<%=$model->getParameterByName("evictConfig")->getValueAt(0)->getSPLExpression()%>),
   CountWindowPolicy(<%=$model->getParameterByName("triggerConfig")->getValueAt(0)->getSPLExpression()%>)),
   funcop_(NULL),
   out_funcop(NULL),
   pyInNames_(NULL),
   occ_(-1)
{
    window_.registerOnWindowTriggerHandler(this);
    window_.registerAfterTupleEvictionHandler(this);

<%
# If occ parameter is positive then pass-by-ref is possible
# Generate code to allow pass by ref but only use when
# not connected to a PE output port.

 my $oc = $model->getParameterByName("outputConnections");

 if ($oc) {
    my $occ = $oc->getValueAt(0)->getSPLExpression();
    if ($occ > 0) {
        # If the occ variable is set, it is known that the output type is
        # and SPL::blob
        $pyoutstyle = 'object';
        my $out_function = 'pickle_in__object_out';
%>

#undef SPLPY_TUPLE_MAP
#define SPLPY_TUPLE_MAP(f, v, r, occ) \
    streamsx::topology::Splpy::pyTupleMapByRef(f, v, r, occ)

    if (!this->getOutputPortAt(0).isConnectedToAPEOutputPort()) {
       // pass by reference
       occ_ = <%=$occ%>;
    }
<%
    } 
 }
%>

    // TODO: set with passthrough function
    out_funcop = new SplpyFuncOp(this, "<%=$out_function%>");    

<% if ($pystyle eq 'dict') { %>
     SplpyGIL lock;
     pyInNames_ = streamsx::topology::Splpy::pyAttributeNames(
               getInputPortAt(0));
<% } %>
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  window_.deleteWindowObjects();
<% if ($pystyle eq 'dict') { %>
    if (pyInNames_) {
      SplpyGIL lock;
      Py_DECREF(pyInNames_);
    }
<% } %>

  delete funcop_;
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    funcop_->prepareToShutdown();
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{

  SplpyGIL lock;
  IPort0Type const &ip = static_cast<IPort0Type const &>(tuple);

<%
print splpy_inputtuple2value($pystyle);
%>

<%if ($pystyle eq 'dict') {%>
@include "../pyspltuple2dict.cgt"
<%}%>

  unsigned char const *data = value.getData();
  unsigned char fmt = *data;

  PyObject *python_value;

  if (fmt == STREAMSX_TPP_PTR) {
      __SPLTuplePyPtr *stp = (__SPLTuplePyPtr *)(data);
      python_value = stp->pyptr;
  }
  // Anything ASCII is also Pickle (Python 2 default format)
  else if (fmt <= STREAMSX_TPP_PICKLE) {
      python_value = pySplValueToPyObject(value);
  }
  //PyObject * ret = streamsx::topology::Splpy::pyTupleMap(in_funcop->callable(), value);  
  window_.insert(python_value);
}


void MY_OPERATOR::afterTupleEvictionEvent(
     Window<PyObject *> & window,  Window<PyObject *>::TupleType & tuple,  Window<PyObject *>::PartitionType const & partition) {
     // Drop reference to tuple after it is removed from the window.
     Py_DECREF(tuple);
}

void MY_OPERATOR::onWindowTriggerEvent(Window<PyObject *> & window, Window<PyObject *>::PartitionType const & key){
    Window<PyObject *>::StorageType const & storage = window.getWindowStorage();

    Window<PyObject *>::DataType & content = storage[key];

    PyObject *items = PyTuple_New(std::distance(content.begin(), content.end()));
    unsigned int idx = 0;
    for(WindowType::DataType::iterator it=content.begin(); it!=content.end(); ++it) {
        PyObject *item = *it;
	// The tuple steals a reference, increment such that the window can maintain a copy
	// once the tuple is deleted.
	Py_INCREF(item);
	PyTuple_SET_ITEM(item, idx, item);
	++idx;
    }

    PyObject *value = items;
  OPort0Type otuple;

<%if ($pyoutstyle eq 'dict') {%>
  {
  SplpyGIL lock;
  PyObject * ret = streamsx::topology::Splpy::pyTupleMap(out_funcop->callable(), value);
  if (ret == NULL){
     Py_DECREF(items);
     return;
  }
  fromPythonToPort0(ret, otuple);
  Py_DECREF(ret);
  }
  
<% } else { %>

  if (SPLPY_TUPLE_MAP(out_funcop->callable(), value,
       otuple.get_<%=$model->getOutputPortAt(0)->getAttributeAt(0)->getName()%>(), occ_))

<%}%>{
     Py_DECREF(items);
     submit(otuple, 0);
     }
}


<%
if ($pyoutstyle eq 'dict') {
  # In this case we don't want the function that
  # converts the Python tuple to an SPL tuple to
  # copy attributes from the input port
  my $iport;

  my $oport = $model->getOutputPortAt(0);
  my $otupleType = $oport->getSPLTupleType();
  my @onames = SPL::CodeGen::Type::getAttributeNames($otupleType);
  my @otypes = SPL::CodeGen::Type::getAttributeTypes($otupleType);

%>
// Create member function that converts Python tuple to SPL tuple
@include  "../../opt/python/codegen/py_pyTupleTosplTuple.cgt"
<%}%>

<%SPL::CodeGen::implementationEpilogue($model);%>
